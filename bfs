def bfs(map, coords1, coords2):
    m = len(map)
    n = len(map[0])
    s = {i: [] for i in range(m * n)}
    used = [0] * n * m
    sum_used = 0
    for i in range(1, m):
        for j in range(1, n):
            for di in [-1, 0, 1]:
                for dj in [-1, 0, 1]:
                    if map[i][j] == map[i + di][j + dj] == 0:
                        s[j + (i - 1) * n - 1].append(j + dj - 1 + (i + di - 1) * n)
                    if map[i][j] == 0 and not used[j + (i - 1) * n - 1]:
                        used[j + (i - 1) * n - 1] = 1
                        sum_used += 1
    cur = [[coords1]]
    while cur:
        new = []
        for way in cur:
            for node in s[way[-1]]:
                if not used[node]:
                    new.append(way + [node])
                    used[node] = 1
                    if node == coords2[0] + coords2[1] * n:
                        return new[-1]
        cur = new
